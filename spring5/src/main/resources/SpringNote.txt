Spring 简介：  -Dfile.encoding=UTF-8
    轻量级开源的JavaEE框架
    辅助解决企业级开发的复杂性
    核心: IOC AOP https://github.com/spring-projects/spring-framework

    Core Container
    Beans    Core    Context     Expression

1、如何创建并生成对象
    xml文件配置 ClassPathXmlApplicationContext
    注解配置 AnnotationConfigApplicationContext
    IOC （控制反转） 将创建对象的权利交给spring，不用再去手动控制对象的创建，指定使用即可
        底层原理： xml文件解析  反射  工厂模式
        对象工厂 BeanFactory IOC的基本实现，面向框架开发人员
            加载配置文件是不会创建对象，只有在获取对象时才会创建对象
        上下文对象 ApplicationContext    BeanFactory的子接口，面向企业开发人员
            加载配置文件时就会创建对象

    1.1 IOC 操作 Bean管理
        Spring创建对象
        Spring注入属性
            set方法
            构造方法
    实现方式： XML配置文件  注解方式
        基于XML方式创建对象时默认调用的是无参构造方法，如果类中没有无参构造方法会报错
    普通Bean 创建对象的类型和返回对象的类型一致
    工厂bean  定义类实现BeanFactory 创建对象的类型和返回对象的类型可以不一致

    1.2 Bean的作用域
    Spring 默认创建的对象是单例
        scope属性：
            singleton （默认）单实例
            prototype 多实例 不是在加载配置文件时创建对象，只有再调用获取时才会创建对象
            request 每次请求时
            session 在一个会话过程中

    1.3 Bean的生命周期
        通过构造器创建bean实例（无参构造）
        bean属性设置值和其他bean引用（set）
        调用bean初始化方法（需要进行配置初始化方法）
        获取bean并使用
        容器关闭，调用bean的销毁方法（需要进行配置销毁方法）

    1.4 属性的XML自动装配
        autowire: byName byType
        <bean id="" class="" autowire=""></bean>


    注解方式管理bean
        代码的特殊标记，注解的格式@注解名称（属性名称=属性值，。。。）
        注解可以生效在类，方法和属性上
        简化配置文件
            component controller service repository
    开启需要扫描的包
    <context:component-scan base-package=""></context:component-scan>
    @MapperScan("com.jay.fang")
    需要管理的bean上添加注解
    @Autowire:根据属性类型注入
    @Qualifier:根据名称注入（要和Autowire一起使用）
    @Resource:可以根据类型注入，也可以根据名称注入  (javax 扩展包中，不是springframework中的,不建议使用)
    @Value:注入普通类型属性

    使用配置类@Configeration
    @Configuration
    @ComponentScan(basePackages = {"com.jay.demo"})

2.AOP
    底层使用动态代理
    （1）有接口时 --> JDK的动态代理
        创建接口实现类的代理对象，增强接口业务功能
    （2）没有接口时 --> CGLIB的动态代理
         创建当前类子类的代理对象，增强类中的方法

    JDK的动态代理
    Proxy
    public static Object newProxyInstance(ClassLoader loader, // 类加载器
                                          Class<?>[] interfaces,  // 代理接口对象
                                          InvocationHandler h){...}  //创建代理对象，实现增强方法

3.JDBCTemplate

4.事务
    数据库操作的最基本单元,逻辑上的一组操作。要么同时成功，要么都失败。
    事务的四个特性： ACID
        原子性 Atomicity
        一致性 Consistency
        隔离性 Isolation
        持久性 Durability
    声明式事务（注解和xml配置）  和  编程式事务

    @Transactional()
    属性：
    propagation 事务的传播行为 （7种）
        REQUIRED 有就沿用，没有就创建新事务（默认行为）
        REQUIRED_NEW 只要调用新方法就创建新的事务
    isolation 隔离级别
        脏读 一个事务读取到别的事务未提交修改的数据
        不可重复读   一个事务读取到另一个事务已经提交修改
        幻读 一个数位可以读取到另一个事务提交添加的数据
                                     脏读    不可重复读    幻读
        READ UNCOMMITTED 读未提交       √         √         √
        READ COMMITTED   读已提交       ×         √         √   Oracle 默认级别
        REPEATABLE READ  可重复度       ×         ×         √   mysql 默认级别
        SERIALIZABLE     串行化         ×         ×         ×
    timeout 超时时间 -1 （不设置）
    readOnly 只读  是否只能进行查询操作，默认false
    rollbackFor 回滚 出现哪些异常时事务回滚
    noRollbackFor 不回滚  出现哪些异常时事务不回滚

5.@Nullable  允许为空



